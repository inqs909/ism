{"title":"R Basics","markdown":{"headingText":"R Basics","containsRefs":false,"markdown":"\n*Modifiend from [Statistical Computing](https://www.inqs.info/stat_comp/)*\n\nThis page focuses on the basics of R programming. While most of your statistical analysis will be done with R functions, it is important to have an idea of what is going on. Additionally, we will cover other topics that you may or may not need to know. The topics we will cover are:\n\n1.  Basic calculations in R\n\n2.  Types of Data\n\n3.  R Objects\n\n4.  R Functions\n\n5.  R Packages\n\n## Basic Calculations\n\nThis section focuses on the basic calculation that can be done in R. This is done by using different operators in R. The table below provides some of the basic operators R can use:\n\n| Operator    | Description        |\n|:------------|:-------------------|\n| `+`         | Addition           |\n| `-`         | Subtraction        |\n| `*`         | Multiplication     |\n| `/`         | Divides            |\n| `^` or `**` | Exponent           |\n| `?`         | Help Documentation |\n\n### Calculator\n\n#### Addition\n\nTo add numbers in R, all you need to use the `+` operator. For example $2 + 2 = 4$. When you type it in R you have:\n\n```{r}\n2 + 2\n```\n\nWhen you ask R to perform a task, it prints out the result of the task. As we can see above, R prints out the number 4.\n\nTo add more than 2 numbers, you can simply just type it in.\n\n```{r}\n2 + 2 + 2\n```\n\nThis provides the number 6.\n\n#### Subtraction\n\nTo subtract numbers, you need to use the `-` operator. Try `4 - 2`:\n\n```{r}\n4 - 2\n```\n\nTry `4 - 6 - 4`\n\n```{r}\n4 - 6 - 4\n```\n\nNotice that you get a negative number.\n\nNow try `4 + 4 - 2 + 8`:\n\n```{r}\n4 + 4 - 2 + 8\n```\n\n#### Multiplication\n\nTo multiply numbers, you will need to use the `*` operator. Try `4 * 4`:\n\n```{r}\n4 * 4\n```\n\n#### Division\n\nTo divide numbers, you can use the `/` operator. Try `9 / 3`:\n\n```{r}\n9 / 3\n```\n\n#### Exponents\n\nTo exponentiate a number to the power of another number, you can use the `^` operator. Try `2^5`:\n\n```{r}\n2^5\n```\n\nIf you want to find $e^2$, you will use the `exp()` function. Try `exp(2)`:\n\n```{r}\nexp(2)\n```\n\n#### Roots\n\nTo take the n-th root of a value, use the `^` operator with the `/` operator to take the n-th root. For example, to take $\\sqrt[5]{35}$, type `32^(1/5)`:\n\n```{r}\n32^(1/5)\n```\n\n#### Logarithms\n\nTo take the natural logarithm of a value, you will use the `log()` function. Try `log(5)`:\n\n```{r}\nlog(5)\n```\n\nIf you want to take the logarithm of a different base, you will use the `log()` function with `base` argument. We will discuss this more in @sec-r-functions.\n\n\n#### Practice\n\nUse the code console below to attempt other arithmetic operations such as $\\ln(e^{23}) + \\sin(2\\pi) - 54/9*(3-8)^2$:\n\n\n```{webr-r}\n\n```\n\n\n### Comparing Numbers {#sec-comparing-numbers}\n\nAnother important part of R is comparing numbers. When you compare two numbers, R will tell if the statement is `TRUE` or `FALSE`. Below are the different comparisons you can make:\n\n| Operator | Description           |\n|----------|-----------------------|\n| `>`      | Greater Than          |\n| `<`      | Less Than             |\n| `>=`     | Greater than or equal |\n| `<=`     | Less than or equal    |\n| `==`     | Equals                |\n| `!=`     | Not Equals            |\n\n#### Less than/Greater than\n\nTo check if one number is less than or greater than another number, you will use the `>` or `<` operators. Try `5 > 4`:\n\n```{r}\n5 > 4\n```\n\nNotice that R states it's true. It evaluates the expression and tells you if it's true or not. Try `5 < 4`:\n\n```{r}\n5 < 4\n```\n\nNotice that R tells you it is false.\n\n#### Less than or equal to/Greater than or equal to\n\nTo check if one number is less than or equal to/greater than or equal to another number, you will use the `>=` or `<=` operators. Try `5 >= 5`:\n\n```{r}\n5 >= 5\n```\n\nTry `5 >= 4`:\n\n```{r}\n5 >= 4\n```\n\nTry `5 <= 4`\n\n```{r}\n5 <= 4\n```\n\n#### Equals and Not Equals\n\nTo check if 2 numbers are equal to each other, you can use the `==` operator. Try `3 == 3`:\n\n```{r}\n3 == 3\n```\n\nTry `4 == 3`\n\n```{r}\n3 == 4\n```\n\nAnother way to see if 2 numbers are not equal to each other, you can use the `!=`. Try `3 != 4`:\n\n```{r}\n3 != 4\n```\n\nTry `3 != 3`:\n\n```{r}\n3 != 3\n```\n\nYou may be asking why use `!=` instead of `==`. They both provides similar results. Well the reason is that you may need the `TRUE` output for analysis. One is only true when they are equal, while the other is true when they are not equal.\n\nIn general, the `!` operator means not or opposite. It can be used to change an `TRUE` to a `FALSE` and vice-versa.\n\n### Help\n\nThe last operator we will discuss is the help operator `?`. If you want to know more about anything we talked about you can type `?` in front of a function and a help page will pop-up in your browser or in RStudio's 'Help' tab. For example you can type `?Arithmetic` or `?Comparison`, to review what we talked about. For other operators we didn't talk about use `?assignOps` and `?Logic`.\n\n## Types of Data\n\nIn R, the type of data, also known as class, we are using dictates how the programming works. For the most part, users will use *numeric*, *logical*, *POSIX* and *character* data types. Other types of data you may encounter are *complex* and *raw*. To obtain more information on them, use the `?` operator.\n\n### Numeric\n\nThe *numeric* class is the data that are numbers. Almost every analysis that you use will be based on the numeric class. To check if you have a numeric class, you just need to use the `is.numeric()` function. For example, try `is.numeric(5)`:\n\n```{r}\nis.numeric(5)\n```\n\nNumeric classes are essentially *double* and *integer* types of data. For example a *double* data is essentially a number with decimal value. An *integer* data are whole numbers. Try `is.numeric(5.63)`, `is.double(5.63)` and `is.integer(5.63)`:\n\n```{r}\nis.numeric(5.63)\nis.double(5.63)\nis.integer(5.63)\n```\n\nNotice how the value $5.63$ is a *numeric* and *double* but not *integer*. Now let's try `is.numeric(7)`, `is.double(7)` and `is.integer(7)`:\n\n```{r}\nis.numeric(7)\nis.double(7)\nis.integer(7)\n```\n\nNotice how the value $7$ is also considered a *numeric* and *double* but not *integer*. This is because typing a whole number will be stored as a *double*. However, if we need to store an *integer*, we will need to type the letter \"L\" after the number. Try `is.numeric(7L)`, `is.double(7L)`, and `is.integer(7L)`:\n\n```{r}\nis.numeric(7L)\nis.double(7L)\nis.integer(7L)\n```\n\n### Logical\n\nA *logical* class are data where the only value is `TRUE` or `FALSE`. Sometimes the data is coded as `1` for `TRUE` and `0` for `FALSE`. The data may also be coded as `T` or `F`. To check if data belongs in the *logical* class, you will need the `is.logical()` function. Try `is.logical(3 < 4)`:\n\n```{r}\nis.logical(3 < 4)\n```\n\nThis is same comparison from @sec-comparing-numbers. The output was `TRUE`. Now R is checking whether the output is of a *logical* class. Since it it, R returns `TRUE`. Now try `is.logical(3 > 4)`:\n\n```{r}\nis.logical(3 > 4)\n```\n\nThe output is `TRUE` as well even though the condition `3 > 4` is `FALSE`. Since the output is a *logical* data type, it is a *logical* variable.\n\n### POSIX\n\nThe *POSIX* class are date-time data. Where the data value is a time component. The *POSIX* class can be very complex in how it is formatted. IF you would like to learn more try `?POSIXct` or `?POSIClt`. First, lets run `Sys.time()` to check what is today's data and time:\n\n```{r}\nSys.time()\n```\n\nNow lets check if its of POSIX class, you can use the `class()` function to figure out which class is it. Try `class(Sys.time())`:\n\n```{r}\nclass(Sys.time())\n```\n\n### Character\n\nA *character* value is where the data values follow a *string* format. Examples of *character* values are letters, words and even numbers. A *character* value is any value surrounded by quotation marks. For example, the phrase \"Hello World!\" is considered as one *character* value. Another example is if your data is coded with the actual words \"yes\" or \"no\". To check if you have *character* data, use the `is.character()` function. Try `is.character(\"Hello World!\")`:\n\n```{r}\nis.character(\"Hello World!\")\n```\n\nNotice that the output says `TRUE`. *Character* values can be created with single quotations. Try `is.character('Hello World!')`:\n\n```{r}\nis.character('Hello World!')\n```\n\n### Complex Numbers\n\n*Complex* numbers are data values where there is a real component and an imaginary component. The imaginary component is a number multiplied by $i=\\sqrt{-1}$. To create a *complex* number, use the `complex()` function. To check if a number is complex, use the `is.complex()` function. Try the following to create a complex number `complex(1, 4, 5)`:\n\n```{r}\ncomplex(1, 4, 5)\n```\n\nNow try `is.complex(complex(1, 4, 5))`:\n\n```{r}\nis.complex(complex(1, 4, 5))\n```\n\n### Raw\n\nYou will probably never use raw data. I have never used raw data in R. To create a raw value, use the `raw()` or `charToRaw()` functions. Try `charToRaw('Hello World!')`:\n\n```{r}\ncharToRaw('Hello World!')\n```\n\nTo check if you have raw data, use the `is.raw()` function. Try `is.raw(charToRaw('Hello World!'))`:\n\n```{r}\nis.raw(charToRaw('Hello World!'))\n```\n\n### Missing\n\nThe last data class in R is missing data. The table below provides a brief introduction of the different types of missing data\n\n| Value            | Description                                                                                              | Functions       |\n|------------------|----------------------------------------------------------------------------------------------------------|-----------------|\n| `NULL`           | These are values indicating an object is empty. Often used for functions with values that are undefined. | `is.null()`     |\n| `NA`             | Stands for \"Not Available\", used to indicate that the value is missing in the data.                      | `is.na()`       |\n| `NaN`            | Stands for \"Not an Number\". Used to indicate a missing number.                                           | `is.nan()`      |\n| `Inf` and `-Inf` | Indicating an extremely large value or a value divided by 0.                                             | `is.infinite()` |\n\n## R Functions {#sec-r-functions}\n\nAn R function is the procedure that R will execute to certain data. For example, the `log(x)` is an R function. It takes the value `x` and provides you the natural logarithm. Here `x` is known as an argument which needs to be specified to us the `log()` function. Find the `log(x = 5)`\n\n```{r}\nlog(x = 5)\n```\n\nAnother argument for the `log()` function is the `base` argument. With the previous code, we did not specify the `base` argument, so R makes the `base` argument equal to the number $e$. If you want to use the common log with base 10, you will need to set the `base` argument equal to 10.\n\nTry `log(x = 5, base = 10)`\n\n```{r}\nlog(x = 5, base = 10)\n```\n\nNow try `log(5,10)`\n\n```{r}\nlog(5,10)\n```\n\nNotice that it provides the same value. This is because R can set arguments based on the values position in the function, regardless if the arguments are specified. For `log(5,10)`, R thinks that 5 corresponds to the first argument `x` and 10 is the second argument `base`.\n\nTo learn more about a functions, use the `?` operator on the function: `?log`.\n\n## R Objects {#sec-r-objects}\n\nR objects are where most of your data will be stored. An R object can be thought of as a container of data. Each object will share some sort of characteristics that will make the unique for different types of analysis.\n\n### Assigning objects\n\nTo create an R object, all we need to do is assign data to a variable. The variable is the name of the R object. it can be called anything, but you can only use alphanumeric values, underscore, and periods. To assign a value to a variable, use the `<-` operator. This is known a left assignment. Kinda like an arrow pointing left. Try assigning 9 to 'x' (`x <- 9`):\n\n```{r}\nx <- 9\n```\n\nTo see if `x` contains 9, type `x` in the console:\n\n```{r}\nx\n```\n\nNow `x` can be treated as data and we can perform data analysis on it. For example, try squaring it:\n\n```{r}\nx^2\n```\n\nYou can use any mathematical operation from the previous sections. Try some other operations and see what happens.\n\nThe output R prints out can be stored in a variable using the asign operator, `<-`. Try storing `x^3` in a variable called `x_cubed`:\n\n```{r}\nx_cubed <- x^3\n```\n\nTo see what is stored in `x_cubed` you can either type `x_cubed` in the console or use the `print()` function with `x_cubed` inside the parenthesis.\n\n```{r}\nx_cubed\nprint(x_cubed)\n```\n\n### Vectors\n\nA vector is a set data values of a certain length. The R object `x` is considered as a numerical vector (because it contains a number) with the length 1. To check, try `is.numeric(x)` and `is.vector(x)`:\n\n```{r}\nis.numeric(x)\nis.vector(x)\n```\n\nNow let's create a logical vector that contains 4 elements (have it follow this sequence: T, F, T, F) and assign it to `y`. To create a vector use the `c()`[^r_basics-1] function and type all the values and separating them with columns. Type `y <- c(T, F, T, F)`:\n\n[^r_basics-1]: The `c()` function allows you to put any data type and as many values as you wish. The only condition of a vector is that it must be the same data type.\n\n```{r}\ny <- c(T, F, T, F)\n```\n\nNow, lets see how `y` looks like. Type `y`:\n\n```{r}\ny\n```\n\nNow lets see if it's a logical vector:\n\n```{r}\nis.logical(y)\nis.vector(y)\n```\n\nFortunately, this vector is really small to count how many elements it has, but what if the vector is really large? To find out how many elements a vector has, use the `length()` function. Try `length(y)`:\n\n```{r}\nlength(y)\n```\n\n### Matrices\n\nA matrix can be thought as a square or rectangular grid of data values. This grid can be constructed can be any size. Similar to vectors they must contain the same data type. The size of a matrix is usually denoted as $n\\times k$, where $n$ represents the number of rows and $k$ represents the number of columns. To get a rough idea of how a matrix may look like, type `matrix(rep(1,12), nrow = 4, ncol = 3)`[^r_basics-2]:\n\n[^r_basics-2]: The function `rep()` creates a vector by repeating a value for a certain length. `rep(1,12)` creates a vector of length 12 with each element being 1. We use the `nrow` and `ncol` arguments in the function to specify the number of rows and columns, respectfully.\n\n```{r}\nmatrix(rep(1, 12), nrow = 4, ncol = 3)\n```\n\nNotice that this is a $4\\times 3$ matrix. Each element in the matrix has the value 1. Now try this `matrix(rbinom(12,1.5), nrow = 4, ncol = 3)`[^r_basics-3]:\n\n[^r_basics-3]: The `rbinom()` function generates binomial random variables and stores them in a vector. `rbinom(12,1,5)` This creates 12 random binomial numbers with parameter $n=1$ and $p=0.5$.\n\n```{r}\nmatrix(rbinom(12, 1, .5), nrow = 4, ncol = 3)\n```\n\nYour matrix may look different, but that is to be expected. Notice that some elements in a matrix are 0's and some are 1's. Each element in a matrix can hold any value.\n\nAn alternate approach to creating matrices is with the use of `rbind()` and `cbind()` functions. Using 2 vectors, and matrices, of the same length, the `rbind()` will append the vectors together by each row. Similarly, the `cbind()` function will append vectors, and matrices, of the same length by columns.\n\n```{r}\nx <- 1:4\ny <- 5:8\nz <- 9:12\ncbind(x, y, z)\nrbind(x, y, z)\n```\n\nIf you want to create a matrix of a specific size without any data, you can use the `matrix()` function and only specify the `nrow` and `ncol` arguments. Here we are creating a $5\\times 11$ empty matrix:\n\n```{r}\nmatrix(nrow = 5, ncol = 11)\n```\n\nLastly, if you need to find out the dimensions of a matrix, you can use `dim()` function on a matrix:\n\n```{r}\ndim(matrix(nrow = 5, ncol = 11))\n```\n\nThis will return a vector of length 2 with the first element being the number of rows and the second element being the number of columns.\n\n### Arrays\n\nMatrices can be considered as a 2-dimensional block of numbers. An array is an n-dimensional block of numbers. While you may never need to use an array for data analysis. It may come in handy when programming by hand. To create an array, use the `array()` function. Below is an example of a $3 \\times 3 \\times 3$ with the numbers 1, 2, and 3 representing the 3rd dimension stored in an R object called `first_array`[^r_basics-4].\n\n[^r_basics-4]: Notice the code is surrounded by parenthesis. This tells R to store the array and print out the results. You can surround code with parenthesis every time you create an object to also print what is stored.\n\n```{r}\n(first_array <- array(c(rep(1, 9), rep(2, 9), rep(3, 9)),\n                      dim=c(3,3,3)))\n```\n\n### Data Frames {#sec-basic-data-frames}\n\nData frames are similar to data set that you may encounter in an excel file. However, there are a couple of differences. First, each row represents an observation, and each column represents a characteristic of the observation. Additionally, each column in a data frame will be the same data type. To get an idea of what a data frame looks like, try `head(iris)` [^r_basics-5]:\n\n[^r_basics-5]: The `head()` function just tells R to only print the top few components of the data frame.\n\n```{r}\nhead(iris)\n```\n\nIn the data frame, the rows indicate a specific observation and the columns are the values of a variable. In terms of the `iris` data set, we can see that row 1 is a specific flower that has a sepal length of 5.1. We can also see that flower 1 has other characteristics such as sepal width and petal length. Lastly, there are results for the other flowers.\n\nNow try `tail(iris)`:\n\n```{r}\ntail(iris)\n```\n\nThe `tail()` function provides the last 6 rows of the data frame.\n\nLastly, if you are interested in viewing a specific variable (column) from a data frame, you can use the `$` operator to specify which variable from a specific data frame. For example, if we are interested in observing the `Sepal.Length` variable from the `iris` data frame, we will type `iris$Sepal.Length`:\n\n```{r}\niris$Sepal.Length\n```\n\n### Lists {#sec-basics-lists}\n\nTo me a list is just a container that you can store practically anything. It is compiled of elements, where each element contains an R object. For example, the first element of a list may contain a data frame, the second element may contain a vector, and the third element may contain another list. It is just a way to store things.\n\nTo create a list, use the `list()` function. Create a list compiled of first element with the mtcars data set, second element with a vector of zeros of size 4, and a matrix $3 \\times 3$ identity matrix[^r_basics-6]. Store the list in an object called `list_one`:\n\n[^r_basics-6]: An identity matrix is a matrix where the diagonal elements are 1 and the non-diagonal elements are 0\n\n```{r}\nlist_one <- list(mtcars, rep(0, 4),\n                 diag(rep(1, 3)))\n```\n\nType `list_one` to see what pops out:\n\n```{r}\nlist_one\n```\n\nEach element in the list is labeled as a number. It is more useful to have the elements named. An element is named by typing the name in quotes followed by the `=` symbol before your object in the `list()` function (`mtcars=mtcars`).\n\n```{r}\nlist_one <- list(mtcars = mtcars,\n                 vector = rep(0, 4),\n                 identity = diag(rep(1, 3)))\n```\n\nHere I am creating an object called `list_one`, where the first element is `mtcars` labeled `mtcars`, the second element is a vector of zeros labeled `vector` and the last element is the identity matrix labeled `identity`.'\n\nNow create a new list called `list_two` and store `list_one` labeled as `list_one` and `first_array` labeled as `array`.\n\n```{r}\n(list_two <- list(list_one = list_one,\n                  array = first_array))\n```\n\n\n## Load Data\n\nIn order to analyze data in R, we must load it into the R environment. This can be done in 2 ways, using the \"Import Dataset\" button in the \"Environment\" tab in RStudio or use R code.\n\n### Importing Data Via RStudio\n\nThis is the most recommended way to import data in RStudio because it can provide R code that you can copy and paste in an R Script.\n\nTo begin choose the \"Import Dataset\" from the \"Environment\" tab in RStudio:\n\n![](img/import.png){fig-align=\"center\"}","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"r_basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","bibliography":["references.bib"],"editor":"source","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"r_basics.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"source","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}